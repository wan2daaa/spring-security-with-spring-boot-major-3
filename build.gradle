plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
//    SonarLint
    id "org.sonarqube" version "3.5.0.2730"
//    docker
    id("com.palantir.docker") version "0.36.0"
}

group = 'wane.study'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "wan2daaa_spring-security-with-spring-boot-major-3"
        property "sonar.organization", "wan2daaa"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
//    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)

    //이미지 이름
    name rootProject.name+'-'+project.name + ":" + version

    //어떤 Dockerfile을 사용할지
    dockerfile file("../Dockerfile")

    //어떤 파일들을 Dockerfile에 복사할 것인가
    files tasks.bootJar.outputs.files

    //Dockerfile에 전달할 인자
    buildArgs(['JAR_FILE' : tasks.bootJar.outputs.files.singleFile.name])
}